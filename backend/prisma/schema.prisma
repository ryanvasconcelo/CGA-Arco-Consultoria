generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------

model Company {
  id           String   @id @default(uuid())
  name         String   @unique
  cnpj         String?   @unique
  logoUrl      String?
  primaryColor String?  @default("#007bff")
  secondaryColor String?  @default("#1f2937") // <-- ADICIONE ESTA LINHA
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  users    User[]
  products CompanyProduct[]
   auditLogs AuditLog[]

  @@map("companies")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  status    Status   @default(ACTIVE)
  passwordResetRequired Boolean  @default(true) // <-- CAMPO ADICIONADO

  // CAMPOS PARA RESET DE SENHA
  passwordResetToken    String?   @unique // O '?' o torna opcional
  passwordResetExpires  DateTime? // O '?' o torna opcional

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyId String
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  userProducts UserProduct[]
  permissions  UserPermission[]
   auditLogs AuditLog[]

  @@map("users")
}

model Product {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companies CompanyProduct[]

  @@map("products")
}

// Tabela para as permissões granulares do Arco Portus
model Permission {
  id     String @id @default(uuid())
  action String // Ex: "CREATE", "READ", "UPDATE", "DELETE"
  subject String // Ex: "DOCUMENT", "REPORT", "USER"
  
  users UserPermission[]

  @@unique([action, subject]) // Garante que não haja permissões duplicadas
  @@map("permissions")
}

model AuditLog {
  id        String      @id @default(uuid())
  action    AuditAction
  details   Json?
  
  authorId  String?
  author    User?       @relation(fields: [authorId], references: [id], onDelete: SetNull)
  
  companyId String?
  company   Company?    @relation(fields: [companyId], references: [id], onDelete: SetNull)

  createdAt DateTime    @default(now())

  @@map("audit_logs")
}

// Tabela Pivot: Conecta Usuários a Permissões
model UserPermission {
  id           String @id @default(uuid())
  userId       String
  permissionId String

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([userId, permissionId])
  @@map("user_permissions")
}


// --- TABELAS PIVOT ANTIGAS ---
model CompanyProduct {
  id        String @id @default(uuid())
  companyId String
  productId String

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  userAccess UserProduct[]

  @@unique([companyId, productId])
  @@map("company_products")
}

model UserProduct {
  id               String @id @default(uuid())
  userId           String
  companyProductId String

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyProduct CompanyProduct @relation(fields: [companyProductId], references: [id])

  @@unique([userId, companyProductId])
  @@map("user_products")
}

// --- ENUMS ---
enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum AuditAction {
  // Ações de Usuário
  CREATE_USER
  UPDATE_USER
  DELETE_USER
  
  // Ações de Empresa
  CREATE_COMPANY
  UPDATE_COMPANY
  DELETE_COMPANY

  // Ações de Relação
  ASSOCIATE_PRODUCT_TO_COMPANY
  DISASSOCIATE_PRODUCT_FROM_COMPANY
  ASSOCIATE_USER_TO_PRODUCT
  DISASSOCIATE_USER_FROM_PRODUCT
  ASSOCIATE_USER_TO_PERMISSION
  DISASSOCIATE_USER_FROM_PERMISSION
  
  // Ações de Autenticação
  LOGIN_SUCCESS
  CHANGE_PASSWORD
}
