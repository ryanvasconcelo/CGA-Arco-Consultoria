// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(uuid())
  name      String   @unique // Adicionado unique para o seed funcionar
  
  // CAMPOS DE CUSTOMIZAÇÃO ADICIONADOS
  logoUrl      String? // O '?' indica que o campo é opcional
  primaryColor String? @default("#007bff") // Podemos ter uma cor padrão

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[]
  products CompanyProduct[] // Renomeado de 'product' para 'products' (mais semântico)

  @@map("companies")
}

model User {
  id        String   @id @default(uuid())
  name      String   // <-- CAMPO DE NOME ADICIONADO
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  userProducts UserProduct[] // Renomeado de 'product' para 'userProducts' (mais claro)

  @@map("users")
}

model Product {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companies CompanyProduct[]

  @@map("products")
}

// Tabela Pivot: Quais serviços uma empresa assinou
model CompanyProduct {
  id        String @id @default(uuid())
  companyId String
  productId String

  // Aqui podemos adicionar as configurações de personalização
  // settings  Json?

  company Company @relation(fields: [companyId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  userAccess UserProduct[]

  @@unique([companyId, productId])
  @@map("company_products")
}

// Tabela Pivot: A qual serviço um usuário tem acesso
model UserProduct {
  id               String @id @default(uuid())
  userId           String
  companyProductId String

  user           User           @relation(fields: [userId], references: [id])
  companyProduct CompanyProduct @relation(fields: [companyProductId], references: [id])

  // Aqui podemos adicionar permissões mais granulares no futuro
  // permissions Json?

  @@unique([userId, companyProductId])
  @@map("user_products")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}